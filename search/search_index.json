{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Urban Observatory API Client Documentation Welcome to the documentation for the Urban Observatory API Client ( uoapi ). This Python package provides a comprehensive interface for accessing and analyzing urban sensor data from the Newcastle Urban Observatory. Overview The Urban Observatory API Client is designed to simplify the process of accessing and analyzing urban sensor data. It provides built-in caching, configuration management, and data analysis capabilities, making it easier for researchers, data scientists, and developers to work with urban sensor data. Features Core Functionality Flexible Data Access : Retrieve sensor data with customizable parameters Spatial Filtering : Filter data by location using bounding boxes or polygons Temporal Filtering : Query data by time ranges or last N days Theme-based Queries : Access data by themes like Traffic, Environmental, or Seismic Advanced Features Intelligent Caching : Built-in caching system with configurable retention periods Data Analysis Tools : JSON structure analysis and automated data formatting DataFrame Integration : Direct conversion of sensor data to Pandas DataFrames Error Handling : Comprehensive error capture and logging system Quick Start Installation pip install uoapi Basic Usage from uoapi import api_client # Initialize the client client = api_client.APIClient() # Get traffic data for the last 7 days data = client.get_raw_sensor_data( theme=\"Traffic\", last_n_days=7 ) # Analyze the data structure analysis = client.analyze_json(theme=\"Traffic\") Configuration The client can be configured using a YAML file or programmatically. Here's a basic configuration example: base_url: \"https://newcastle.urbanobservatory.ac.uk/api/v1.1\" timeout: 100000 time_slice: last_n_days: 2 starttime: null endtime: null sensor: theme: Traffic Data Types The API provides access to various types of urban data: - Traffic flow and patterns - Environmental measurements - Weather conditions - Air quality metrics - Seismic activity - And more... Next Steps Check out the Installation Guide for detailed setup instructions Read the API Client Documentation for comprehensive usage details Explore example use cases and tutorials Contributing We welcome contributions! Please visit our GitHub repository to: - Report issues - Submit feature requests - Contribute code improvements License This project is licensed under the MIT License. See the LICENSE file for details.","title":"Home"},{"location":"#urban-observatory-api-client-documentation","text":"Welcome to the documentation for the Urban Observatory API Client ( uoapi ). This Python package provides a comprehensive interface for accessing and analyzing urban sensor data from the Newcastle Urban Observatory.","title":"Urban Observatory API Client Documentation"},{"location":"#overview","text":"The Urban Observatory API Client is designed to simplify the process of accessing and analyzing urban sensor data. It provides built-in caching, configuration management, and data analysis capabilities, making it easier for researchers, data scientists, and developers to work with urban sensor data.","title":"Overview"},{"location":"#features","text":"","title":"Features"},{"location":"#core-functionality","text":"Flexible Data Access : Retrieve sensor data with customizable parameters Spatial Filtering : Filter data by location using bounding boxes or polygons Temporal Filtering : Query data by time ranges or last N days Theme-based Queries : Access data by themes like Traffic, Environmental, or Seismic","title":"Core Functionality"},{"location":"#advanced-features","text":"Intelligent Caching : Built-in caching system with configurable retention periods Data Analysis Tools : JSON structure analysis and automated data formatting DataFrame Integration : Direct conversion of sensor data to Pandas DataFrames Error Handling : Comprehensive error capture and logging system","title":"Advanced Features"},{"location":"#quick-start","text":"","title":"Quick Start"},{"location":"#installation","text":"pip install uoapi","title":"Installation"},{"location":"#basic-usage","text":"from uoapi import api_client # Initialize the client client = api_client.APIClient() # Get traffic data for the last 7 days data = client.get_raw_sensor_data( theme=\"Traffic\", last_n_days=7 ) # Analyze the data structure analysis = client.analyze_json(theme=\"Traffic\")","title":"Basic Usage"},{"location":"#configuration","text":"The client can be configured using a YAML file or programmatically. Here's a basic configuration example: base_url: \"https://newcastle.urbanobservatory.ac.uk/api/v1.1\" timeout: 100000 time_slice: last_n_days: 2 starttime: null endtime: null sensor: theme: Traffic","title":"Configuration"},{"location":"#data-types","text":"The API provides access to various types of urban data: - Traffic flow and patterns - Environmental measurements - Weather conditions - Air quality metrics - Seismic activity - And more...","title":"Data Types"},{"location":"#next-steps","text":"Check out the Installation Guide for detailed setup instructions Read the API Client Documentation for comprehensive usage details Explore example use cases and tutorials","title":"Next Steps"},{"location":"#contributing","text":"We welcome contributions! Please visit our GitHub repository to: - Report issues - Submit feature requests - Contribute code improvements","title":"Contributing"},{"location":"#license","text":"This project is licensed under the MIT License. See the LICENSE file for details.","title":"License"},{"location":"client/","text":"API Client Documentation Overview The API Client module provides a robust interface for interacting with the Urban Observatory API. It handles configuration management, request handling, and data processing for sensor data retrieval and analysis. Classes APIConfig A dataclass that holds configuration settings for the API client. Attributes base_url (str): Base URL for the API (default: \"https://newcastle.urbanobservatory.ac.uk/api/v1.1\") timeout (int): Request timeout in milliseconds (default: 100000) time_slice (Optional[TimeSliceParams]): Time-related parameters location (Optional[LocationParams]): Location-related parameters sensor (Optional[SensorParams]): Sensor-related parameters TimeSliceParams A dataclass for time-related query parameters. Attributes last_n_days (Optional[int]): Number of days to look back starttime (Optional[str]): Start time for data retrieval endtime (Optional[str]): End time for data retrieval LocationParams A dataclass for location-related query parameters. Attributes polygon_wkb (Optional[str]): WKB representation of a polygon bbox_p1_x (Optional[float]): Bounding box point 1 X coordinate bbox_p1_y (Optional[float]): Bounding box point 1 Y coordinate bbox_p2_x (Optional[float]): Bounding box point 2 X coordinate bbox_p2_y (Optional[float]): Bounding box point 2 Y coordinate SensorParams A dataclass for sensor-related query parameters. Attributes sensor_type (Optional[str]): Type of sensor theme (Optional[str]): Theme category broker (Optional[str]): Broker name data_variable (Optional[str]): Data variable name APIClient Main class for interacting with the Urban Observatory API. Initialization client = APIClient(config_path: Optional[str] = None) Core Methods get_raw_sensor_data Retrieves raw sensor data with configurable parameters. def get_raw_sensor_data( self, last_n_days: Optional[int] = None, starttime: Optional[str] = None, endtime: Optional[str] = None, polygon_wkb: Optional[str] = None, bbox_p1_x: Optional[float] = None, bbox_p1_y: Optional[float] = None, bbox_p2_x: Optional[float] = None, bbox_p2_y: Optional[float] = None, sensor_type: Optional[str] = None, theme: Optional[str] = None, broker: Optional[str] = None, data_variable: Optional[str] = None ) -> Dict[str, Any] analyze_json Analyzes the JSON structure of raw sensor data. def analyze_json( self, sensor_type: Optional[str] = None, theme: Optional[str] = None, broker: Optional[str] = None, data_variable: Optional[str] = None ) -> Optional[Dict[str, Any]] Configuration Methods _update_config_explicitly Internal method to update configuration parameters. def update_config_explicitly( self, time_slice_params: Optional[Dict] = None, location_params: Optional[Dict] = None, sensor_params: Optional[Dict] = None ) -> None Metadata Methods store_metadata Caches metadata from the API and saves it to files. print_formatted_metadata Prints formatted metadata from cached files. DataFrame Methods get_dataframe Converts raw sensor data to a pandas DataFrame. Usage Examples Basic Usage # Initialize client client = APIClient() # Get raw sensor data data = client.get_raw_sensor_data( theme=\"Traffic\", last_n_days=7 ) # Analyze JSON structure analysis = client.analyze_json(theme=\"Traffic\") # Update configuration explicitly client.update_config_explicitly( time_slice_params={\"last_n_days\": 7}, sensor_params={\"theme\": \"Traffic\"} ) # Get data with updated config data = client.get_raw_sensor_data() Error Handling The module includes comprehensive error handling through the APIError class, which captures and logs various types of errors: - HTTP errors - Connection errors - Timeout errors - JSON decode errors Logging The module uses Python's built-in logging system to provide detailed information about: - Configuration changes - API requests - Error conditions - Data processing steps Dependencies requests pandas logging yaml json dataclasses","title":"API Client"},{"location":"client/#api-client-documentation","text":"","title":"API Client Documentation"},{"location":"client/#overview","text":"The API Client module provides a robust interface for interacting with the Urban Observatory API. It handles configuration management, request handling, and data processing for sensor data retrieval and analysis.","title":"Overview"},{"location":"client/#classes","text":"","title":"Classes"},{"location":"client/#apiconfig","text":"A dataclass that holds configuration settings for the API client.","title":"APIConfig"},{"location":"client/#attributes","text":"base_url (str): Base URL for the API (default: \"https://newcastle.urbanobservatory.ac.uk/api/v1.1\") timeout (int): Request timeout in milliseconds (default: 100000) time_slice (Optional[TimeSliceParams]): Time-related parameters location (Optional[LocationParams]): Location-related parameters sensor (Optional[SensorParams]): Sensor-related parameters","title":"Attributes"},{"location":"client/#timesliceparams","text":"A dataclass for time-related query parameters.","title":"TimeSliceParams"},{"location":"client/#attributes_1","text":"last_n_days (Optional[int]): Number of days to look back starttime (Optional[str]): Start time for data retrieval endtime (Optional[str]): End time for data retrieval","title":"Attributes"},{"location":"client/#locationparams","text":"A dataclass for location-related query parameters.","title":"LocationParams"},{"location":"client/#attributes_2","text":"polygon_wkb (Optional[str]): WKB representation of a polygon bbox_p1_x (Optional[float]): Bounding box point 1 X coordinate bbox_p1_y (Optional[float]): Bounding box point 1 Y coordinate bbox_p2_x (Optional[float]): Bounding box point 2 X coordinate bbox_p2_y (Optional[float]): Bounding box point 2 Y coordinate","title":"Attributes"},{"location":"client/#sensorparams","text":"A dataclass for sensor-related query parameters.","title":"SensorParams"},{"location":"client/#attributes_3","text":"sensor_type (Optional[str]): Type of sensor theme (Optional[str]): Theme category broker (Optional[str]): Broker name data_variable (Optional[str]): Data variable name","title":"Attributes"},{"location":"client/#apiclient","text":"Main class for interacting with the Urban Observatory API.","title":"APIClient"},{"location":"client/#initialization","text":"client = APIClient(config_path: Optional[str] = None)","title":"Initialization"},{"location":"client/#core-methods","text":"","title":"Core Methods"},{"location":"client/#get_raw_sensor_data","text":"Retrieves raw sensor data with configurable parameters. def get_raw_sensor_data( self, last_n_days: Optional[int] = None, starttime: Optional[str] = None, endtime: Optional[str] = None, polygon_wkb: Optional[str] = None, bbox_p1_x: Optional[float] = None, bbox_p1_y: Optional[float] = None, bbox_p2_x: Optional[float] = None, bbox_p2_y: Optional[float] = None, sensor_type: Optional[str] = None, theme: Optional[str] = None, broker: Optional[str] = None, data_variable: Optional[str] = None ) -> Dict[str, Any]","title":"get_raw_sensor_data"},{"location":"client/#analyze_json","text":"Analyzes the JSON structure of raw sensor data. def analyze_json( self, sensor_type: Optional[str] = None, theme: Optional[str] = None, broker: Optional[str] = None, data_variable: Optional[str] = None ) -> Optional[Dict[str, Any]]","title":"analyze_json"},{"location":"client/#configuration-methods","text":"","title":"Configuration Methods"},{"location":"client/#_update_config_explicitly","text":"Internal method to update configuration parameters. def update_config_explicitly( self, time_slice_params: Optional[Dict] = None, location_params: Optional[Dict] = None, sensor_params: Optional[Dict] = None ) -> None","title":"_update_config_explicitly"},{"location":"client/#metadata-methods","text":"","title":"Metadata Methods"},{"location":"client/#store_metadata","text":"Caches metadata from the API and saves it to files.","title":"store_metadata"},{"location":"client/#print_formatted_metadata","text":"Prints formatted metadata from cached files.","title":"print_formatted_metadata"},{"location":"client/#dataframe-methods","text":"","title":"DataFrame Methods"},{"location":"client/#get_dataframe","text":"Converts raw sensor data to a pandas DataFrame.","title":"get_dataframe"},{"location":"client/#usage-examples","text":"","title":"Usage Examples"},{"location":"client/#basic-usage","text":"# Initialize client client = APIClient() # Get raw sensor data data = client.get_raw_sensor_data( theme=\"Traffic\", last_n_days=7 ) # Analyze JSON structure analysis = client.analyze_json(theme=\"Traffic\") # Update configuration explicitly client.update_config_explicitly( time_slice_params={\"last_n_days\": 7}, sensor_params={\"theme\": \"Traffic\"} ) # Get data with updated config data = client.get_raw_sensor_data()","title":"Basic Usage"},{"location":"client/#error-handling","text":"The module includes comprehensive error handling through the APIError class, which captures and logs various types of errors: - HTTP errors - Connection errors - Timeout errors - JSON decode errors","title":"Error Handling"},{"location":"client/#logging","text":"The module uses Python's built-in logging system to provide detailed information about: - Configuration changes - API requests - Error conditions - Data processing steps","title":"Logging"},{"location":"client/#dependencies","text":"requests pandas logging yaml json dataclasses","title":"Dependencies"},{"location":"installation/","text":"Installation Guide Prerequisites Python 3.10 or higher pip (Python package installer) Docker (optional, for container deployment) Installation Methods 1. Using pip (Recommended for Python Development) Basic Installation pip install uoapi Development Installation For development purposes, you can install the package with poetry: # Install poetry if you haven't already pip install poetry # Clone the repository git clone https://github.com/yourusername/uoapi.git cd uoapi # Install dependencies and package poetry install 2. Using Docker (Recommended for Deployment) Pull the Official Image docker pull carrowmw/uoapi:latest Run the Container docker run carrowmw/uoapi:latest Build from Source # Clone the repository git clone https://github.com/yourusername/uoapi.git cd uoapi # Build the image docker build -t uoapi . # Run the container docker run uoapi Configuration Local Installation Create a config.yml file in your project directory: base_url: \"https://newcastle.urbanobservatory.ac.uk/api/v1.1\" timeout: 100000 time_slice: last_n_days: 2 starttime: null endtime: null sensor: theme: Traffic Docker Installation Mount a configuration file when running the container: docker run -v /path/to/your/config.yml:/app/config.yml uoapi Verification Verify the installation by running Python and importing the package: from uoapi import api_client client = api_client.APIClient() print(\"Installation successful!\") Troubleshooting Common Issues Python Version Mismatch Error: \"Python version < 3.10\" Solution: Upgrade Python to version 3.10 or higher Dependencies Error: Missing dependencies Solution: Ensure all dependencies are installed using pip install -r requirements.txt Docker Issues Error: Image not found Solution: Ensure Docker is running and you have internet access to pull the image For more help, please open an issue on our GitHub repository.","title":"Installation"},{"location":"installation/#installation-guide","text":"","title":"Installation Guide"},{"location":"installation/#prerequisites","text":"Python 3.10 or higher pip (Python package installer) Docker (optional, for container deployment)","title":"Prerequisites"},{"location":"installation/#installation-methods","text":"","title":"Installation Methods"},{"location":"installation/#1-using-pip-recommended-for-python-development","text":"","title":"1. Using pip (Recommended for Python Development)"},{"location":"installation/#basic-installation","text":"pip install uoapi","title":"Basic Installation"},{"location":"installation/#development-installation","text":"For development purposes, you can install the package with poetry: # Install poetry if you haven't already pip install poetry # Clone the repository git clone https://github.com/yourusername/uoapi.git cd uoapi # Install dependencies and package poetry install","title":"Development Installation"},{"location":"installation/#2-using-docker-recommended-for-deployment","text":"","title":"2. Using Docker (Recommended for Deployment)"},{"location":"installation/#pull-the-official-image","text":"docker pull carrowmw/uoapi:latest","title":"Pull the Official Image"},{"location":"installation/#run-the-container","text":"docker run carrowmw/uoapi:latest","title":"Run the Container"},{"location":"installation/#build-from-source","text":"# Clone the repository git clone https://github.com/yourusername/uoapi.git cd uoapi # Build the image docker build -t uoapi . # Run the container docker run uoapi","title":"Build from Source"},{"location":"installation/#configuration","text":"","title":"Configuration"},{"location":"installation/#local-installation","text":"Create a config.yml file in your project directory: base_url: \"https://newcastle.urbanobservatory.ac.uk/api/v1.1\" timeout: 100000 time_slice: last_n_days: 2 starttime: null endtime: null sensor: theme: Traffic","title":"Local Installation"},{"location":"installation/#docker-installation","text":"Mount a configuration file when running the container: docker run -v /path/to/your/config.yml:/app/config.yml uoapi","title":"Docker Installation"},{"location":"installation/#verification","text":"Verify the installation by running Python and importing the package: from uoapi import api_client client = api_client.APIClient() print(\"Installation successful!\")","title":"Verification"},{"location":"installation/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"installation/#common-issues","text":"Python Version Mismatch Error: \"Python version < 3.10\" Solution: Upgrade Python to version 3.10 or higher Dependencies Error: Missing dependencies Solution: Ensure all dependencies are installed using pip install -r requirements.txt Docker Issues Error: Image not found Solution: Ensure Docker is running and you have internet access to pull the image For more help, please open an issue on our GitHub repository.","title":"Common Issues"}]}